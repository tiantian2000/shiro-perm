<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.perm.mapper.UserMapper">

  <!-- 返回结果的映射
		   把表中的字段映射到类里的属性
	 -->
  <resultMap type="User"  id="resultMapUser">
    <id property="id"  column="id" />
    <result property="username" column="username"/>
    <result property="password" column="password"/>
    <result property="sex" column="sex" />
    <result property="age" column="age" />
    <result property="tel" column="tel" />
    <result property="address" column="address" />
    <!-- ofType:意思是这个集合中存放的对象的数据类型 -->
    <collection property="rolesList"  ofType="Role" javaType="List"
    select="getRoleByUsername" column="username">
      <id property="id"  column="rid" />
      <result property="roleCode" column="role_code"/>
      <result property="roleName" column="role_name"/>
    </collection>
  </resultMap>
  
    <!-- 返回结果的映射
		   把表中的字段映射到类里的属性
	 -->
  <resultMap type="User"  id="resultMapByUsername">
    <id property="id"  column="id" />
    <result property="username" column="username"/>
    <result property="password" column="password"/>
    <result property="sex" column="sex" />
    <result property="age" column="age" />
    <result property="tel" column="tel" />
    <result property="address" column="address" />
    <!-- ofType:意思是这个集合中存放的对象的数据类型 -->
    <collection property="rolesList"  ofType="Role" javaType="List">
      <id property="id"  column="rid" />
      <result property="roleCode" column="role_code"/>
      <result property="roleName" column="role_name"/>
    </collection>
  </resultMap>

<!--   <select id="selectAll" resultMap="resultMapUser">
    select u.id,u.username,u.password,u.sex,u.age,u.tel,u.address,
    r.id rid,r.role_code,r.role_name
    from user u
    left join user_roles ur on u.username=ur.username
    left join role r on ur.role_id=r.id
    select * from user
  </select> -->
  
  <select id="selectAll" resultMap="resultMapUser">
    select id,username,password,sex,age,tel,address from user u    
  </select>

  <select id="getRoleByUsername" parameterType="String" resultType="Role">
	    select r.id rid,r.role_code,r.role_name 
	    from user_roles ur 
    	inner join role r on ur.role_id=r.id
    	where ur.username=#{username}
  </select> 
	
	
  <select id="selectByUsername" parameterType="String" resultMap="resultMapByUsername">
    select u.id,u.username,u.password,u.sex,u.age,u.tel,u.address,
    r.id rid,r.role_code,r.role_name
    from user u
    left join user_roles ur on u.username=ur.username
    left join role r on ur.role_id=r.id
    where u.username = #{username}
  </select>

  <select id="selectById" parameterType="Integer" resultMap="resultMapByUsername">
    select u.id,u.username,u.password,u.sex,u.age,u.tel,u.address,
    r.id rid,r.role_code,r.role_name
    from user u
    left join user_roles ur on u.username=ur.username
    left join role r on ur.role_id=r.id
    where u.id = #{id}
  </select>
  
  <insert id="add" parameterType="User">
    insert into user(username,password) values(#{username},#{password})
  </insert>
  
  <delete id="delRoleByUsername" parameterType="String" >
  	delete from user_roles where username=#{username}
  </delete>

  <insert id="addUserRole" parameterType="Map">
  	insert into user_roles(username,role_id) values(#{username},#{roleId});
  </insert>

</mapper>